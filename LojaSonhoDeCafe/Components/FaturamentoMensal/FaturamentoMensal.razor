@page "/Faturamento"

@inject IJSRuntime js

@if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><h1>Faturamento Mensal</h1></th>
                <th> </th>
                <th></th>
            </tr>
            <tr>
                <th>Valor das Vendas do mês de</th>
                <th>Quantidade de Produtos</th>
                <th>Quantidade de Usuarios</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@TotalPrecoMes</td>
                <td>@TotalQuantProdutos</td>
                <td>@TotalQuantUsuarios</td>
            </tr>
        </tbody>
    </table>

    <h1>Escolha o mês para buscar o Faturamento</h1>
    <div class="select-container">
        <select class="select-box" @bind="mesDoAno">
            <option value="0">Selecione um mês</option>
            @foreach (var mes in mesesDoAno)
            {
                <option value="@mes.Value">@mes.Key</option>
            }
        </select>
        <button class="btn btn-success icone-butao shadow-none" disabled="@EnableBtn"
            @onclick="(()=> MostrarFaturamento(mesDoAno))">
            Mostrar Faturamento
        </button>
    </div>

    @if (PagamentosDiarios != null && PagamentosDiarios.Any())
    {
        <button type="button" class="btn btn-sm btn-primary botao-Download" disabled="@EnableBtnDownLoad" @onclick="DownloadTableForExcel">
            <i class="bi bi-download"></i>
            Download Excel
        </button>
    }

    <TabelaFaturamentoMensal PagamentosDiarios="PagamentosDiarios"
                             TotalPrecoMes="TotalPrecoMes"
                             TotalQuantProdutos="TotalQuantProdutos"
                             TotalQuantUsuarios="TotalQuantUsuarios">
    </TabelaFaturamentoMensal>
}


@code {

    [Inject] IPagamentoService? PagamentoService { get; set; }

    public IEnumerable<PagamentoDiarioDto>? PagamentosDiarios { get; set; }


    private decimal TotalPrecoMes { get; set; }

    private int TotalQuantProdutos { get; set; }

    private int TotalQuantUsuarios { get; set; }

    private int mesDoAno { get; set; }

    public string? NomeDoMes { get; set; }

    private string? MensagemErro { get; set; }

    public bool EnableBtn {get ; set; }

    public bool EnableBtnDownLoad { get; set; }


    Dictionary<string, int> mesesDoAno = new Dictionary<string, int>()
    {
        { "Janeiro", 1 },{ "Fevereiro", 2 }, { "Março", 3 },
        { "Abril", 4 },{ "Maio", 5 },  { "Junho", 6 },
        { "Julho", 7 },  { "Agosto", 8 },   { "Setembro", 9 },
        { "Outubro", 10 }, { "Novembro", 11 },{ "Dezembro", 12 }
    };



    private async Task MostrarFaturamento(int mesDoAno)
    {
        try
        {
            EnableBtn = true;
            NomeDoMes = mesesDoAno.FirstOrDefault(x => x.Value == mesDoAno).Key;
            PagamentosDiarios = await PagamentoService!.ObterTodosPagamentosPorMes(mesDoAno);
            CalcularPrecoTotal();
            await Task.Delay(1000);
            EnableBtn = false;

        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro: {ex.Message}";
        }

    }

    // private async Task DownloadTableForExcel( )
    // {
    //     EnableBtnDownLoad = true;
    //     var config = new CsvConfiguration(CultureInfo.InvariantCulture)
    //         {
    //             HasHeaderRecord = true
    //         };
    //         using (var memoryStream = new MemoryStream())
    //         using (TextWriter textWriter = new StreamWriter(memoryStream))
    //         using (var csvWriter = new CsvWriter(textWriter, config))
    //         {
    //             await csvWriter.WriteRecordsAsync(PagamentosDiarios);

    //             textWriter.Flush();
    //             memoryStream.Seek(0, SeekOrigin.Begin);
    //             using var streamRef = new DotNetStreamReference(memoryStream);
    //             string nomeArquivo = $"FaturamentoDe{NomeDoMes}.csv";
    //             await js.InvokeVoidAsync("downloadFileFromStream", nomeArquivo, streamRef);
    //         }

    //     await Task.Delay(1000);
    //     EnableBtnDownLoad = false;

    // }

    private async Task DownloadTableForExcel( )
    {
        EnableBtnDownLoad = true;
        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                HasHeaderRecord = true
            };
        using (var memoryStream = new MemoryStream())
        using (TextWriter textWriter = new StreamWriter(memoryStream))
        using (var csvWriter = new CsvWriter(textWriter, config))
        {
            // Escreve o cabeçalho e os dados da tabela de totais
            csvWriter.WriteField("Total Preco");
            csvWriter.WriteField("Total Quantidade");
            csvWriter.WriteField("Total Usuarios");
            csvWriter.NextRecord();
            csvWriter.WriteField(TotalPrecoMes);
            csvWriter.WriteField(TotalQuantProdutos);
            csvWriter.WriteField(TotalQuantUsuarios);
            csvWriter.NextRecord();

            // Escreve uma linha em branco para separar as tabelas
            csvWriter.NextRecord();

            // Escreve o cabeçalho da segunda tabela
            csvWriter.WriteField("Usuário");
            csvWriter.WriteField("Email");
            csvWriter.WriteField("Preço Total");
            csvWriter.WriteField("Quantidade Total");
            csvWriter.WriteField("Forma de Pagamento");
            csvWriter.WriteField("Data do Pagamento");
            csvWriter.NextRecord();

            // Escreve os dados da segunda tabela
            foreach (var pagamento in PagamentosDiarios)
            {
                csvWriter.WriteField(pagamento.Usuario);
                csvWriter.WriteField(pagamento.Email);
                csvWriter.WriteField(pagamento.TotalPrecoDiaria);
                csvWriter.WriteField(pagamento.TotalQuantDiaria);
                csvWriter.WriteField(pagamento.EPagamento);
                csvWriter.WriteField(pagamento.HoraDoPagamento);
                csvWriter.NextRecord();
            }

            textWriter.Flush();
            memoryStream.Seek(0, SeekOrigin.Begin);
            using var streamRef = new DotNetStreamReference(memoryStream);
            string nomeArquivo = $"FaturamentoDe{NomeDoMes}.csv";
            await js.InvokeVoidAsync("downloadFileFromStream", nomeArquivo, streamRef);
        }

        await Task.Delay(1000);
        EnableBtnDownLoad = false;
    }


    private void CalcularPrecoTotal( )
    {

        GerarValores();
        TotalPrecoMes += PagamentosDiarios!.Sum(x => x.TotalPrecoDiaria);

        TotalQuantProdutos += PagamentosDiarios!.Sum(x => x.TotalQuantDiaria);

        TotalQuantUsuarios += PagamentosDiarios!.Select(x => x.Usuario).Count();
    }

    public void GerarValores( )
    {
        TotalPrecoMes = 0;
        TotalQuantProdutos = 0;
        TotalQuantUsuarios = 0;
    }

}
