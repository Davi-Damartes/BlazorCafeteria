@page "/Faturamento"

@if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><h1>Faturamento Mensal</h1></th>
                <th> </th>
                <th></th>
            </tr>
            <tr>
                <th>Valor das Vendas do mês de</th>
                <th>Quantidade de Produtos</th>
                <th>Quantidade de Usuarios</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@TotalPrecoMes</td>
                <td>@TotalQuantProdutos</td>
                <td>@TotalQuantUsuarios</td>
            </tr>
        </tbody>
    </table>

    <h1>Escolha o mês para buscar o Faturamento</h1>
    <div class="select-container" >
        <select class="select-box" @bind="mesDoAno">
            <option value=" " selected>mês</option>
            @foreach (var mes in mesesDoAno)
            {
                <option value="@mes.Value">@mes.Key</option>            
            }
        </select>
    </div>
        <button class="btn btn-success" @onclick="(()=> MostrarFaturamento(mesDoAno))">
            Mostrar Faturamento
        </button>

    <TabelaFaturamentoMensal PagamentosDiarios="PagamentosDiarios"></TabelaFaturamentoMensal>

  

}

@code {

    [Inject] IPagamentoService? PagamentoService { get; set; }

    public IEnumerable<PagamentoDiarioDto>? PagamentosDiarios { get; set; } 

    private string? MensagemErro { get; set; }

    private decimal TotalPrecoMes { get; set; }

    private int TotalQuantProdutos { get; set; }

    private int TotalQuantUsuarios { get; set; }

    private int mesDoAno { get; set; }

    private string? nomeDomes { get; set; }

    public int SelecionarMes { get; set; }
    Dictionary<string, int> mesesDoAno = new Dictionary<string, int>()
    {
        { "Janeiro", 1 },{ "Fevereiro", 2 }, { "Março", 3 },
        { "Abril", 4 },{ "Maio", 5 },  { "Junho", 6 },
        { "Julho", 7 },  { "Agosto", 8 },   { "Setembro", 9 },
        { "Outubro", 10 }, { "Novembro", 11 },{ "Dezembro", 12 }
    };




    public async void MostrarFaturamento(int mesDoAno)
    {
        try
        {
            
            PagamentosDiarios = await PagamentoService!.ObterTodosPagamentosPorMes(mesDoAno);
            CalcularPrecoTotal();
        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro: {ex.Message}";
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {
    //         PagamentosDiarios = await PagamentoService!.ObterTodosPagamentosPorMes(5);
    //         CalcularPrecoTotal();
    //     }
    //     catch (Exception ex)
    //     {
    //         MensagemErro = $"Erro: {ex.Message}";
    //     }
    // }

    private void CalcularPrecoTotal( )
    {
        TotalPrecoMes += PagamentosDiarios!.Sum(x => x.TotalPrecoDiaria);

        TotalQuantProdutos += PagamentosDiarios!.Sum(x => x.TotalQuantDiaria);

        TotalQuantUsuarios += PagamentosDiarios!.Select(x => x.Usuario).Count();
    }

}
