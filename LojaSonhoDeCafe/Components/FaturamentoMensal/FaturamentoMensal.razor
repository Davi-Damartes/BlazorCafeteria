@page "/Faturamento"

@if (PagamentosDiarios is null && MensagemErro is null)
{
    <ExibirSpinner />
    <h3>Nenhum Pamento encontrado...</h3>
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th><h1>Faturamento Mensal</h1></th>
                <th></th>
                <th></th>
            </tr>
            <tr>
                <th>Valor das Vendas</th>
                <th>Quantidade de Produtos</th>
                <th>Quantidade de Usuarios</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@TotalPrecoMes</td>
                <td>@TotalQuantProdutos</td>
                <td>@TotalQuantUsuarios</td>
            </tr>
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Usuário</th>
                <th>Email</th>
                <th>Preço Total</th>
                <th>Quantidade Total</th>
                <th>Forma de Pagamento</th>
                <th>Data do Pagamento</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pagamento in PagamentosDiarios!)
            {
                <tr>
                    <td>@pagamento.Usuario</td>
                    <td>@pagamento.Email</td>
                    <td>@pagamento.TotalPrecoDiaria</td>
                    <td>@pagamento.TotalQuantDiaria</td>
                    <td>@pagamento.EPagamento</td>
                    <td>@pagamento.HoraDoPagamento</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Tabela 2: Resumo Mensal -->
  

}

@code {

    [Inject] IPagamentoService? PagamentoService { get; set; }

    public IEnumerable<PagamentoDiarioDto>? PagamentosDiarios { get; set; } 

    private string? MensagemErro { get; set; }

    private decimal TotalPrecoMes { get; set; }

    private int TotalQuantProdutos { get; set; }

    private int TotalQuantUsuarios { get; set; }

    protected override async Task OnInitializedAsync( )
    {
        try
        {
            PagamentosDiarios = await PagamentoService!.ObterTodosPagamentosPorMes(5);
            CalcularPrecoTotal();
        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro: {ex.Message}";
        }
    }

    private void CalcularPrecoTotal( )
    {
        TotalPrecoMes += PagamentosDiarios!.Sum(x => x.TotalPrecoDiaria);

        TotalQuantProdutos += PagamentosDiarios!.Sum(x => x.TotalQuantDiaria);

        TotalQuantUsuarios += PagamentosDiarios!.Select(x => x.Usuario).Count();
    }

}
