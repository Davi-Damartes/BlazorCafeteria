@page "/PagamentoPersonalizado"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IJSRuntime jsruntime

@implements IAsyncDisposable

<PageTitle>Pagamento</PageTitle>

@if (CarrinhoCompraItens is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{

    <h1>Selecione a Forma de Pagamento</h1>
    <h3 class="mb-4">
        Preencha o cadastro e selecione uma das formas de pagamento e clique em <b>Continuar</b> para prosseguir para <b>
            concluir o pedido
        </b>.
    </h3>
    <EditForm Model="@PagamentoDiarioPag" OnValidSubmit="AdicionaPagamento_Click">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="d-flex justify-content-around flex-wrap border rounded-top pt-4 px-3">

            <div class="mb-4 mx-2 flex-even">
                <input type="radio" class="btn-check" name="cadastro" id="pag1">
                <label class="btn btn-outline-danger p-4 h-100 w-100" for="pag1">
                    <h3>
                        <b class="text-dark">Dados de Cadastro</b>
                    </h3>
                    <hr>
                    <div class="form-floating mb-3">
                        <InputText id="txtNome" type="text" name="text" class="form-control" @bind-Value="PagamentoDiarioPag!.Usuario" placeholder="" />
                        <label for="txtNome" class="text-black-50">Nome</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText id="txtEmail" name="txtEmail" type="text" class="form-control" @bind-Value="PagamentoDiarioPag!.Email" placeholder="" />
                        <label for="txtEmail" class="text-black-50">Email</label>
                    </div>

                    <h5>
                        <b class="text-dark">Endereço</b>
                    </h5>
                    <div class="form-floating mb-3">
                        <input type="text" id="txtCep" class="form-control" @bind="cep" />
                        <button class="botao lupa-BuscarCep" disabled="@EnableBtn" @onclick:preventDefault="true" @onclick="BuscarCepBrasilApi_click">
                            <svg style="height: 29px; width: 29px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                <path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 
                                0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM288 176c0-44.2-35.8-80-80-80s-80 35.8-80 
                                80c0 48.8 46.5 111.6 68.6 138.6c6 7.3 16.8 7.3 22.7 0c22.1-27 68.6-89.8 68.6-138.6zm-112 0a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" />
                            </svg>
                        </button>
                        <label for="txtCep" class="text-black-50">Cep</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="text" id="txtRua" class="form-control" @bind-Value="BrasilCep!.Street" />
                        <label for="txtRua" class="text-black-50">Rua</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="text" id="txtBairro" class="form-control" @bind-Value="BrasilCep.Neighborhood" />
                        <label for="txtBairro" class="text-black-50">Bairro</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText id="txtCidade" class="form-control" @bind-Value="BrasilCep.City" />
                        <label for="txtCidade" class="text-black-50">Cidade</label>
                    </div>
                </label>
            </div>


            <div class="mb-4 mx-2 flex-even" id="divPagamentoCartao">
                <input type="radio" class="btn-check" name="pagamento" autocomplete="off" id="pagamento2">
                <label class="btn btn-outline-danger p-4 h-100 w-100" for="pagamento2">
                    <h3>
                        <b class="text-dark">Pagamento Cartão</b>
                    </h3>
                    <hr>
                    <h5 class="text-dark"><b>Tipo de Pagamento:</b></h5>

                    <InputRadioGroup Name="EPagamento" @bind-Value="PagamentoDiarioPag.EPagamento">
                        <div class="icones-Pagamento text-dark">
                            <label class="opcao-pagamento text-dark">
                                <i class="fa-brands fa-cc-visa"></i>
                                <div class="radio-Button">
                                    <InputRadio Name="EPagamento" class="text-black-50 centralizar-buton" Value="EPagamentoDto.visa" />
                                </div>
                            </label>
                            <label class="opcao-pagamento text-dark">
                                <i class="fa-brands fa-cc-mastercard"></i>
                                <div class="radio-Button">
                                    <InputRadio Name="EPagamento" class="text-black-50 centralizar-buton" Value="EPagamentoDto.mastercard" />
                                </div>
                            </label>
                            <label class="opcao-pagamento text-dark">
                                <i class="fa-brands fa-cc-paypal"></i>
                                <div class="radio-Button">
                                    <InputRadio Name="EPagamento" class="text-black-50 radio-Button" Value="EPagamentoDto.paypal" />
                                </div>
                            </label>
                            <label class="opcao-pagamento text-dark">
                                <i class="fa-solid fa-barcode"></i>
                                <div class="radio-Button">
                                    <InputRadio Name="EPagamento" class="mudar-buton" Value="EPagamentoDto.boleto" />
                                </div>
                            </label>

                        </div>
                    </InputRadioGroup>

                    <div class="form-floating mb-3">
                        <input type="text" disabled id="txtNome" class="form-control" placeholder=" " autofocus>
                        <label for="txtNome" class="text-black-50">Nome Impresso no Cartão</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input type="text" disabled id="txtNumero" class="form-control" placeholder=" ">
                        <label for="txtNumero" class="text-black-50">Número do Cartão</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input type="text" disabled id="txtValidade" class="form-control" placeholder=" ">
                        <label for="txtValidade" class="text-black-50">Validade (mm/aa)</label>
                    </div>

                    <div class="form-floating mb-3">
                        <input type="text" disabled id="txtCodigo" class="form-control" placeholder=" ">
                        <label for="txtCodigo" class="text-black-50">Código de Segurança</label>
                    </div>

                    <div class="form-floating">
                        <select id="selParcelas" class="form-select">
                            <option value="1" selected>À vista</option>
                            <option value="2">2 x sem juros</option>
                            <option value="3">3 x sem juros</option>
                            <option value="4">4 x sem juros</option>
                            <option value="5">5 x sem juros</option>
                            <option value="6">6 x sem juros</option>
                        </select>
                        <label for="selParcelas" class="text-black-50">Parcelamento</label>
                    </div>
                </label>
            </div>


            <div class="mb-4 mx-2 flex-even" id="divPagamentoDinheiro">
                <InputRadioGroup Name="EPagamento" @bind-Value="PagamentoDiarioPag.EPagamento">
                    <InputRadio Name="EPagamento" class="btn-check" autocomplete="off" id="pagamento3" Value="EPagamentoDto.Dinheiro"/>
                    <label class="btn btn-outline-danger p-4 h-100 w-100" for="pagamento3">
                        <h3>
                            <b class="text-dark">Dinheiro</b>
                        </h3>
                        <hr>
                        <form action="">
                            <h4 class="text-dark"><b>Valor da Compra: R$ @PrecoTotal</b></h4>
                            <h4 class="text-dark"><b>Quantidade de itens: @QuantidadeTotal</b></h4>
                            <br>
                            <h5 class="text-dark">
                                <b>Se precisar de troco, informe no campo abaixo.</b>
                            </h5>
                            <div class="form-floating mb-3">
                                <input type="text" @bind="formattedValue" @oninput="OnInput" id="txtTroco" class="form-control" placeholder="">
                                <label for="txtTroco" class="text-black-50">Troco para quanto?</label>
                            </div>
                        </form>
                    </label>
                </InputRadioGroup>
            </div>



        </div>
        <div class="text-end border border-top-0 rounded-bottom p-4 pb-0 mb-4">
            <a href="/CarrinhoCompra" class="btn btn-outline-success btn-lg mb-4">
                Voltar para o carrinho
            </a>

            <button type="submit" class="btn btn-danger btn-lg ms-2 mb-4" disabled="@EnableBtn">
                Confirmar Pagamento
            </button>
        </div>
    </EditForm>



}
@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IPagamentoService? PagamentoService { get; set; }

    [Inject]
    public IPagamentoHttpService? PagamentoHttpService { get; set; }

    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }
    [Inject]
    public ICarrinhoCompraHttpService? CarrinhoCompraHttpService { get; set; }

    public CarrinhoItemDto? CarrinhoItem { get; set; }

    private PagamentoDiarioDto? PagamentoDiarioPag { get; set; } = new();

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    public List<PagamentoProdutoDto>? ListaProdutosPagamento { get; set; } = new List<PagamentoProdutoDto>();


    private BrasilCep? BrasilCep { get; set; } = new();

    private string? MensagemErro { get; set; }

    public HttpClient httpClient = new();

    public string? cep { get; set; }



    public decimal PrecoTotal { get; set; }

    public int QuantidadeTotal { get; set; }


    public bool EnableBtn { get; set; }


    private IJSObjectReference? module;

    private string formattedValue = "0,00";


    private void OnInput(ChangeEventArgs e)
    {
        var input = e.Value.ToString();
        input = input.Replace(",", "").Replace(".", "");

        if (decimal.TryParse(input, out var value))
        {
            value /= 100;
            formattedValue = value.ToString("N2");
        }
        else
        {
            formattedValue = "0,00";
        }
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await CarrinhoCompraHttpService!.ObterItensCarrinho(UsuarioLogado.UsuarioId);
            AtualizarPrecoEQuantidade();
            AdicionarListaProdNoPagamento();
            foreach (var item in CarrinhoCompraItens)
            {
                ObtemItemDoCarrinho(item.Id);
            }
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async Task AdicionaPagamento_Click( )
    {     
      
        EnableBtn = true;
        try
        {         
            EnableBtn = true;
            await Task.Delay(1000);
            EnableBtn = false;

            AdicionarListaProdNoPagamento();

            if (PagamentoDiarioPag != null)
            {
                //var resultado = await PagamentoService!.AdicionarPagamento(PagamentoDiario);
                var resultado = await PagamentoHttpService!.AdicionarPagamento(PagamentoDiarioPag);
                if (resultado == true)
                {
                    await Task.Delay(1000);
                    //await CarrinhoCompraService!.LimpaItensCarrinhoDeCompra();
                    await CarrinhoCompraHttpService!.LimpaItensCarrinhoDeCompra();

                    ZerarContadorCarrinhoCompra();
                    await ShowSuccessToastr();

                    NavigationManager!.NavigateTo("/Produtos");

                }
                else
                {
                    await ShowFailToastr();
                }

                MensagemErro = "Loja fechada!!! Pagamento Não concluído";
            }
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }


    private void AdicionarListaProdNoPagamento( )
    {
        var ListaProdutosPagamento = new List<PagamentoProdutoDto>();

        // Preenche a lista de PagamentoProdutoDto com os produtos do carrinho
        foreach (var item in CarrinhoCompraItens)
        {
            var pagamentoProduto = new PagamentoProdutoDto
                {
                    ProdutoId = item.ProdutoId,
                    QuantidadeComprada = item.Quantidade,
                    ProdutoNome = item.ProdutoNome,
                    PrecoTotal = item.PrecoTotal
                };

            ListaProdutosPagamento.Add(pagamentoProduto);
        }

        PagamentoDiarioPag!.TotalPrecoDiaria = PrecoTotal;
        PagamentoDiarioPag!.TotalQuantDiaria = QuantidadeTotal;
        PagamentoDiarioPag.ProdutosDoPagamento = ListaProdutosPagamento;
    }




    private async Task BuscarCepBrasilApi_click( )
    {
        try
        {
            var url = $"https://brasilapi.com.br/api/cep/v1/{cep}";
            BrasilCep = await httpClient.GetFromJsonAsync<BrasilCep>(url);
        }
        catch (Exception ex)
        {
            if (BrasilCep == null)
            {
                MensagemErro = ex.Message;
            }
        }

    }

    private CarrinhoItemDto ObtemItemDoCarrinho(int id)
    {
        CarrinhoItem = CarrinhoCompraItens!.FirstOrDefault(x => x.Id == id)!;
        return CarrinhoItem;
    }

    private void ZerarContadorCarrinhoCompra( )
    {
        QuantidadeTotal = 0;
        CarrinhoCompraService!.RaiseEventCarrinhoCompraChanged(QuantidadeTotal);
    }

    private void AtualizarPrecoEQuantidade()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private void SetPrecoTotal( )
    {
        PrecoTotal = CarrinhoCompraItens!.Sum(p => p.PrecoTotal);
    }

    private void SetQuantidadeTotal( )
    {
        QuantidadeTotal = CarrinhoCompraItens!.Sum(p => p.Quantidade);
    }


    public async Task ShowSuccessToastr( )
    {
        await jsruntime.ToastrSuccess("Obrigado pele Preferência :D");
    }

    public async Task ShowFailToastr( )
    {
        await jsruntime.ToastrFail("Tente novamente ou refaça o pedido!");
    }


    //Dispose 
    async ValueTask IAsyncDisposable.DisposeAsync( )
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}