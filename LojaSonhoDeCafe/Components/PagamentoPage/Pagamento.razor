@page "/Pagamento"

@inject IJSRuntime jsruntime

@if (CarrinhoCompraItens is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <EditForm Model="@PagamentoDiario" OnValidSubmit="AdicionaPagamento_Click">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="container">
            <div class="row">
                <h2 class="titulo">Simulador de Pagamento</h2>
                <h2>Total:@PrecoTotal.ToString("C")</h2>
                <h3>Quantidade de itens: @QuantidadeTotal</h3>
                <div class="column">
                   
                    <span class="titulo-cartoes"><b>Nome:</b></span>
                    <div class="input-box">
                        <label for="Nome"></label>
                        <InputText id="Nome" type="text" class="input-form" @bind-Value="PagamentoDiario!.Usuario" placeholder="Nome" />
                    </div>
                    <span class="titulo-cartoes"><b>Email:</b></span>
                    <div class="input-box">
                        <label for="Email"></label>
                        <InputText id="Email" type="text" class="input-form" @bind-Value="PagamentoDiario.Email" placeholder="Email" />
                    </div>


                    <span class="titulo-cartoes"><b>Cep:</b></span>
                     <div class="input-box">
                        <label for="cep"></label>
                        <input id="cep" type="text" @bind="cep" class="input-form" placeholder="Digite o Cep: "/>
                        <div class="formatacao-botao">
                            <button class="botao lupa-BuscarCep" @onclick:preventDefault="true" @onclick="BuscarCepBrasilApi_click">
                                <i class="fa-solid fa-magnifying-glass-location"></i>
                            </button>
                        </div>
                     </div>

                    <span class="titulo-cartoes"><b>Rua:</b></span>
                    <div class="input-box">
                        <label for="Rua"></label>
                        <InputText id="Rua" class="input-form" @bind-Value="BrasilCep!.Street"  placeholder="Rua" />
                    </div>

                    <span class="titulo-cartoes"><b>Bairro:</b></span>
                    <div class="input-box">
                        <label for="Bairro"></label>
                        <InputText id="Bairro" class="input-form" @bind-Value="BrasilCep.Neighborhood"  placeholder="Bairro" />
                    </div>

                    <span class="titulo-cartoes"><b>Cidade:</b></span>
                    <div class="input-box">
                        <label for="Cidade"></label>
                        <InputText id="Cidade" class="input-form" @bind-Value="BrasilCep.City"  placeholder="Cidade" />
                    </div>
                    <span class="titulo-cartoes"><b>Estado:</b></span>
                    <div class="input-box">
                        <label for="Estado"></label>
                        <InputText id="Estado" class="input-form" @bind-Value="BrasilCep.State"  placeholder="Estado" />
                    </div>
                </div>

                <div class="column">
                    <span class="titulo-cartoes"><b>Opções de Pagamento:</b></span>
                    <div class="input-box-TipoPagamento">
                        <h5><b>Tipo de Pagamento:</b></h5>
                        <div class="icones-Pagamento">
                            <label class="opcao-pagamento">
                                <i class="fa-brands fa-cc-visa icone"></i>
                                <input type="radio" name="opcao-pagamento" value="visa"
                                       @onchange="(() => PagamentoDiario!.EPagamento = EPagamentoDto.visa)">
                            </label>
                            <label class="opcao-pagamento">
                                <i class="fa-brands fa-cc-mastercard icone"></i>
                                <input type="radio" name="opcao-pagamento" value="mastercard"
                                       @onchange="(() => PagamentoDiario!.EPagamento = EPagamentoDto.mastercard)">
                            </label>
                            <label class="opcao-pagamento">
                                <i class="fa-brands fa-cc-paypal icone"></i>
                                <input type="radio" name="opcao-pagamento" value="paypal"
                                       @onchange="(() => PagamentoDiario!.EPagamento = EPagamentoDto.paypal)" />
                            </label>
                            <label class="opcao-pagamento">
                                <i class="fa-solid fa-barcode icone"></i>
                                <input type="radio" name="opcao-pagamento" value="codigoDeBarra"
                                       @onchange="(() => PagamentoDiario!.EPagamento = EPagamentoDto.codigoDeBarra)" />
                            </label>
                        </div>
                    </div>
                    <div class="input-box">
                        <span><b>Nome do titular do cartão:</b></span>
                        <input type="text" class="input-form" placeholder="Fulano De tal">
                    </div>
                    <div class="input-box">
                        <span><b>Número do cartão:</b></span>
                        <input type="text" class="input-form" placeholder="XXXXXXXXXXXXXXXX">
                    </div>
                    <div class="input-box">
                        <span><b>Código de segurança (CVV/CVC):</b></span>
                        <input type="text" class="input-form" placeholder="XXX">
                    </div>
                    <div class="input-box">
                        <span><b>Data Validade Cartão:</b></span>
                        <input type="text" class="input-form" placeholder="XX/XXXX">
                    </div>
                </div>
                <button class="btn" type="submit">
                    Pagar
                </button>
            </div>
        </div>
    </EditForm>


}


@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IPagamentoService? PagamentoService { get; set; }

    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public CarrinhoItemDto? CarrinhoItem { get; set; }

    private PagamentoDiarioDto? PagamentoDiario { get; set; } = new();

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }


    public BrasilCep? BrasilCep { get; set; } = new();

    public Cep? Cep { get; set; } = new();

    public HttpClient httpClient = new();
    public string? cep { get; set; }


    public decimal PrecoTotal { get; set; }

    public int QuantidadeTotal { get; set; }

    public string? MensagemErro { get; set; }


    protected override async Task OnInitializedAsync( )
    {
        try
        {
            CarrinhoCompraItens = await CarrinhoCompraService!.ObterItens(UsuarioLogado.UsuarioId);
            AtualizarPrecoEQuantidade();

            foreach (var item in CarrinhoCompraItens)
            {
                ObtemItemDoCarrinho(item.Id);
            }
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async void BuscarCepBrasilApi_click()
    {
        try
        {
            var url = $"https://brasilapi.com.br/api/cep/v1/{cep}";
            BrasilCep = await httpClient.GetFromJsonAsync<BrasilCep>(url);
        }
        catch (Exception ex)
        {
            if(BrasilCep == null)
            {
                MensagemErro = ex.Message;
            }
        }

    }


    private CarrinhoItemDto ObtemItemDoCarrinho(int id)
    {
        CarrinhoItem = CarrinhoCompraItens!.FirstOrDefault(x => x.Id == id)!;
        return CarrinhoItem;
    }


    private async void BuscarCep_click( )
    {
        try
        {
            var url = $"https://viacep.com.br/ws/{cep}/json/";
            Cep = await httpClient.GetFromJsonAsync<Cep>(url);
        }
        catch (Exception ex)
        {
            if (Cep == null)
            {
                MensagemErro = ex.Message;
            }
        }

    }



    private async void AdicionaPagamento_Click( )
    {
        try
        {
            PagamentoDiario!.TotalQuantDiaria = CarrinhoItem!.Quantidade;
            PagamentoDiario.TotalPrecoDiaria = CarrinhoItem.PrecoTotal;

            if (PagamentoDiario != null)
            {
                await PagamentoService!.AdicionarPagamento(PagamentoDiario);
                await ShowSuccessToastr();


                await Task.Delay(2500);
                await CarrinhoCompraService!.LimpaItensCarrinhoDeCompra();

                ZerarContadorCarrinhoCompra();

                NavigationManager!.NavigateTo("/ ");
            }
            else
            {
                await ShowFailToastr();
            }
            MensagemErro = "Loja fechada Pagamento Não conclúido";
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private void ZerarContadorCarrinhoCompra( 
    )
    {
        QuantidadeTotal = 0;
        CarrinhoCompraService!.RaiseEventCarrinhoCompraChanged(QuantidadeTotal);
    }

    public async Task ShowSuccessToastr( )
    {
        await jsruntime.ToastrSuccess("Obrigado pele preferência!");
    }
    public async Task ShowFailToastr( )
    {
        await jsruntime.ToastrFail("Tente novamente ou refaça o pedido!");
    }



    private void AtualizarPrecoEQuantidade()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private void SetPrecoTotal( )
    {
        PrecoTotal = CarrinhoCompraItens!.Sum(p => p.PrecoTotal);
    }

    private void SetQuantidadeTotal( )
    {
        QuantidadeTotal = CarrinhoCompraItens!.Sum(p => p.Quantidade);
    }
}