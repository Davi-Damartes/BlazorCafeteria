@inject IConfiguration config
@inject IJSRuntime Js

@foreach (var produto in Produtos!)
{
    <div class="card" style="width: 18rem;">

        <div class="form-check form-switch">
            <input @onclick="(() => MudarCorDoBotao_Click(produto.Id))" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
            <label class="form-check-label" for="flexSwitchCheckDefault">
            </label>
            <i class="far fa-heart icone-coracao"></i>
        </div>

        <a href="/ProdutosDetalhes/@produto.Id">
            <div class="card-body">
                <a href="/ProdutosDetalhes/@produto.Id">
                    @if (string.IsNullOrWhiteSpace(produto.FotoUrl) == false)
                    {
                        <img src="@CreateWebPath(produto.FotoUrl)" class="card-img-top imagem-borda" width="420" height="200" alt="Imagem do Produto">
                    }
                    else
                    {
                        <img src="@produto.FotoUrl" class="card-img-top imagem-borda" width="420" height="200" alt="Imagem do Produto">
                    }
                </a>

                <h5 class="card-title card-nome-Produto">@produto.Nome</h5>
                <p class="card-text">@produto.Descricao.</p>
                <a href="/ProdutosDetalhes/@produto.Id">
                    <h5 class="card-title mb-3">
                        @produto.Preco.ToString("c")
                    </h5>
                </a>
            </div>
        </a>
        <div>
            <ExibirMensagemExclusao produtoDto="produto!"></ExibirMensagemExclusao>
        </div>
    </div>
}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    private string CreateWebPath(string? relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    [Inject]
    public NavigationManager? navigationManager { get; set; }


    protected async Task MudarCorDoBotao_Click(Guid produtoId)
    {
        var produto = Produtos?.SingleOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {
            produto.IsFavorito = !produto.IsFavorito;

            await AtualizaProduto(produto!);
        }
    }

    public async Task AtualizaProduto(ProdutoDto Produto)
    {
        await ProdutoService!.AtualizaProdutoService(Produto);
    }

    async Task DeletarProduto(ProdutoDto produtoDto)
    {
        bool confirmed = await Js.InvokeAsync<bool>("confirm", "Você tem certeza ?");
        if (confirmed)
        {
            navigationManager!.NavigateTo("/ ");
        }
        else
        {
            navigationManager!.NavigateTo($"/ProdutosPorCategoria/{produtoDto.CategoriaId}");
        }
    }

}


