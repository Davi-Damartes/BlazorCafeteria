@inject IConfiguration config
@inject IJSRuntime Js
@foreach (var produto in Produtos!)
{
    <div class="card" style="width: 18rem;">

        <div class="form-check form-switch">
            <input @onclick="(() => MudarCorDoBotao_Click(produto.Id))"  class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
            <label class="form-check-label" for="flexSwitchCheckDefault">
                <i class="far fa-heart icone-coracao"></i>
            </label>
        </div>

        <a href="/ProdutosDetalhes/@produto.Id">
            <div class="card-body">
                <a href="/ProdutosDetalhes/@produto.Id">
                    @if (File.Exists(produto.FotoUrl))
                    {
                        <img src="@produto.FotoUrl" class="card-img-top" width="400" alt="Imagem do Produto">
                    }
                    else if(!File.Exists(produto.FotoUrl))
                    {
                        <img src="@CreateWebPath(produto.FotoUrl)" class="card-img-top" width="400" alt="Imagem do Produto">
                    }
                </a>

                <h5 class="card-title">@produto.Nome</h5>
                <p class="card-text">@produto.Descricao.</p>
                <a href="/ProdutosDetalhes/@produto.Id">
                    <h5 class="card-title mb-3">
                        @produto.Preco.ToString("c")
                    </h5>
                </a>
            </div>
        </a>

    </div>
}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    private string CreateWebPath(string? relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }




    protected async Task MudarCorDoBotao_Click(Guid produtoId)
    {
        var produto = Produtos?.SingleOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {  
            produto.IsFavorito = !produto.IsFavorito;

            await AtualizaProduto(produto!);
        }
    }

    public async Task AtualizaProduto(ProdutoDto Produto)
    {
        await ProdutoService!.AtualizaProdutoService(Produto);
    }

}


