@inject IConfiguration config
@inject IJSRuntime Js
@foreach (var produto in Produtos!)
{
    <div class="card" style="width: 18rem;">

        <div class="btn-group">
            <button @onclick="(() => MudarCorDoBotao_Click(produto.Id))" class="btn shadow-none" id="btn-@produto.Id">
                <i class="fa-solid fa-heart icone-coracao"></i>
            </button>
        </div>


        <a href="/ProdutosDetalhes/@produto.Id">
            <div class="card-body">
                <a href="/ProdutosDetalhes/@produto.Id">
                    @if (!File.Exists(produto.FotoUrl))
                    {
                        <img src="@CreateWebPath(produto.FotoUrl!)" class="card-img-top" alt="Imagem do Produto">
                    }
                    else
                    {
                        <img src="@produto.FotoUrl" class="card-img-top" alt="Imagem do Produto">
                    }
                </a>

                <h5 class="card-title">@produto.Nome</h5>
                <p class="card-text">@produto.Descricao.</p>
                <a href="/ProdutosDetalhes/@produto.Id">
                    <h5 class="card-title mb-3">
                        @produto.Preco.ToString("c")
                    </h5>
                </a>
            </div>
        </a>
        <DeletarProduto produto="produto"> </DeletarProduto>
    </div>


}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }




    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath!);
    }

    protected async Task MudarCorDoBotao_Click(Guid produtoId)
    {
        var produto = Produtos?.SingleOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {  
            produto.IsFavorito = !produto.IsFavorito;
            await Js.InvokeVoidAsync("mudarCorButao", produto.Id, produto.IsFavorito);
            await AtualizaProduto(produto!);
        }
    }



    public async Task AtualizaProduto(ProdutoDto Produto)
    {
        await ProdutoService!.AtualizaProdutoService(Produto);
    }

    public bool AbrirDialogModal { get; set; }


    private void DeletaItemEFechaDialog(bool acao)
    {
        AbrirDialogModal = false;
        NavigationManager!.NavigateTo("/CadastroProduto");
        StateHasChanged();
    }

    private void OpenDialog()
    {
        AbrirDialogModal = true;
        StateHasChanged();
    }


}


