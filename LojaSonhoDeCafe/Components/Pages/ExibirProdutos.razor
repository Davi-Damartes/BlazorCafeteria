@inject IConfiguration config
@foreach (var produto in Produtos!)
{
    <div class="card" style="width: 18rem;">



                <div class="card">
                    <input type="checkbox" id="@($"favorito-{produto.Id}")" @onchange="() => MudarBotao(produto.Id)" checked="@produto.ProdutoFavorito" />
                    <label for="@($"favorito-{produto.Id}")">
                        <i class="fa-regular fa-heart icone-coracao"></i>
                    </label>
                </div>

            <a href="/ProdutosDetalhes/@produto.Id">
                <div class="card-body">
                    <a href="/ProdutosDetalhes/@produto.Id">                                       
                        @if (File.Exists(produto.FotoUrl))
                        {
                            <img src="@produto.FotoUrl" class="card-img-top" width="400" alt="Imagem do Produto">
                        }
                        else
                        {
                            <img src="@CreateWebPath(produto.FotoUrl)" class="card-img-top" width="400" alt="Imagem do Produto">
                        }
                    </a>

                    <h5 class="card-title">@produto.Nome</h5>
                    <p class="card-text">@produto.Descricao.</p>
                    <a href="/ProdutosDetalhes/@produto.Id">
                        <h5 class="card-title mb-3">
                            @produto.Preco.ToString("c")
                        </h5>                                                                      
                    </a>
                </div>
            </a>
        
    </div>
}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }
    bool isClicado = false;

    private string CreateWebPath(string? relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    public void MudarBotao(Guid produtoId)
    {
        var produto = Produtos?.FirstOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {
            produto.ProdutoFavorito = !produto.ProdutoFavorito;
            AtualizarListaDeProdutos(); // Método para atualizar a lista de produtos na interface de usuário
        }
    }

    private void AtualizarListaDeProdutos( )
    {
        // O código para atualizar a lista de produtos pode variar dependendo de como você está gerenciando o estado dos produtos.
        // Se você estiver usando um componente pai para passar a lista de produtos, você pode chamar StateHasChanged() no componente pai.
        // Se você estiver usando um serviço de estado, você pode notificar o serviço sobre a mudança.
        // Certifique-se de implementar esse método de acordo com a sua arquitetura.
    }
}

