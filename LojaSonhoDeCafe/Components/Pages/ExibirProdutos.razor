@inject IConfiguration config
@inject IJSRuntime Js

<div class="col-12 d-flex justify-content-between align-items-center mb-4">
    <div class="col-12 col-md-5">
        <QuickGrid Items="@BuscandoProdutos">          
                <ColumnOptions>
                    <div class="search-box mb-4">
                        <label for="form-control mb-1"><b>Buscar Produto</b></label>
                        <input type="search" class="form-control fs-4" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Nome Produto..."/>
                    </div>
                </ColumnOptions>
        </QuickGrid>       
    </div>   
    
    <div class="d-flex">
        <form class="d-inline-block me-3">
            <select class="form-select form-select-lg fs-4" @bind="ModoExibicao">
                <option value="menor">Ordernar por menor Preço</option>
                <option value="maior">Ordernar por maior Preço</option>
            </select>
        </form>
        <nav class="d-inline-block fs-3">
            <ul class="pagination pagination-lg my-0">
                <li class="page-item">
                    <a class="page-link shadow-none" href="produtosPorCategoria/1">1</a>
                </li>
                <li class="page-item">
                    <a class="page-link shadow-none" href="produtosPorCategoria/2">2</a>
                </li>
                <li class="page-item">
                    <a class="page-link shadow-none" href="produtosPorCategoria/3">3</a>
                </li>
                <li class="page-item">
                    <a class="page-link shadow-none" href="produtosPorCategoria/4">4</a>
                </li>
            </ul>
        </nav>
    </div>
</div>
@if (ModoExibicao == "menor")
{
    Produtos = Produtos!.OrderBy(x => x.Preco).ToList();
}
else @if (ModoExibicao == "maior")
{
    Produtos = Produtos!.OrderByDescending(x => x.Preco).ToArray();
}

@{
    var produtosExibidos = nameFilter != null ? BuscandoProdutos.ToList() : Produtos;
}

@if (!produtosExibidos.Any())
{
    <div class="alert alert-warning" role="alert">
        Nome do Produto não encontrado!. Verifique o nome escrito.
    </div>
}

@foreach (var produto in produtosExibidos!)
{
    <div class="col-12 d-flex col-md-6 col-lg-3 mb-4">
        <div class="card text-center bg-light d-block" title="Detalhes do Produto">
            <div class="btn-group position-absolute end-0" title="Favoritar Produto">
                <button @onclick="(() => MudarCorDoBotao_Click(produto.Id))" class="btn shadow-none" id="btn-@produto.Id">
                    <i class="fa-solid fa-heart icone-coracao shadow-none"></i>
                </button>
            </div>
            <a href="/ProdutosDetalhes/@produto.Id">
                <div class="card-body">
                    <a href="/ProdutosDetalhes/@produto.Id">
                        @if (!File.Exists(produto.FotoUrl))
                        {
                            <img src="@CreateWebPath(produto.FotoUrl!)" class="card-img-top" alt="Imagem do Produto">
                        }
                        else
                        {
                            <img src="@produto.FotoUrl" class="card-img-top" alt="Imagem do Produto">
                        }
                    </a>
                    <div class="card-header card-preco">
                        <h5><b>@produto.Preco.ToString("C")</b></h5>
                    </div>
                    <h4 class="card-title"><b>@produto.Nome</b></h4>
                    <p class="card-text mb-2 w-100 limitarLinhas-Card">@produto.Descricao</p>
                </div>
                <div class="card-footer bg-light mb-5 text-center border-0">
                    @if (@produto.QuantidadeEmEstoque > 0)
                    {
                        <h3 class="text-success">
                            <b>Quantidade em Estoque (@produto.QuantidadeEmEstoque)</b>
                        </h3>
                    }
                    else
                    {
                        <h2 class="text-danger">
                            <b>Produto Esgotado!!!</b>
                        </h2>
                    }
                </div>
            </a>
            <div class="mt-6 position-absolute bottom-0 end-0 mb-3 me-3">
                <DeletarProduto produto="produto"> </DeletarProduto>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public IProdutoHttpService? ProdutoHttpService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    private string? ModoExibicao { get; set; }

    private string? BuscarPorNome { get; set; } = string.Empty;


    IQueryable<ProdutoDto>? itemsQueryable;

    string? nameFilter;

    IQueryable<ProdutoDto> BuscandoProdutos
    {
        get
        {
            var produtos = Produtos;
            Produtos = produtos.ToList();
            itemsQueryable = Produtos.AsQueryable();
            var result = itemsQueryable;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Nome.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

            }

            return result;
        }
    }


    protected override void OnParametersSet()
    {
        nameFilter = null;
    }




    protected async Task MudarCorDoBotao_Click(Guid produtoId)
    {
        var produto = Produtos?.SingleOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {
            produto.IsFavorito = !produto.IsFavorito;
            await Js.InvokeVoidAsync("mudarCorButao", produto.Id, produto.IsFavorito);
            await AtualizaProdutoFavorito2(produto!);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var produto in Produtos)
            {
                await Js.InvokeVoidAsync("mudarCorButao", produto.Id, produto.IsFavorito);
            }

        }

    }

    public async Task AtualizaProdutoFavorito2(ProdutoDto Produto)
    {
        await ProdutoHttpService!.AtualizaProdutoFavorito(Produto);
    }






    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath!);
    }

    public bool AbrirDialogModal { get; set; }

    private void DeletaItemEFechaDialog(bool acao)
    {
        AbrirDialogModal = false;
        NavigationManager!.NavigateTo("/CadastroProduto");
        StateHasChanged();
    }

    private void OpenDialog( )
    {
        AbrirDialogModal = true;
        StateHasChanged();
    }


}


