@inject IConfiguration config
@inject IJSRuntime Js


@foreach (var produto in Produtos!)
{ 
    <div class="card text-center bg-light d-block" title="Adicionar ao Carrinho">
        <div class="btn-group position-absolute end-0" title="Favoritar Produto">
            <button @onclick="(() => MudarCorDoBotao_Click(produto.Id))" class="btn" id="btn-@produto.Id">
                <i class="fa-solid fa-heart icone-coracao"></i>
            </button>
        </div>
            <a href="/ProdutosDetalhes/@produto.Id">
                <div class="card-body">
                    <a href="/ProdutosDetalhes/@produto.Id">
                        @if (!File.Exists(produto.FotoUrl))
                        {
                            <img src="@CreateWebPath(produto.FotoUrl!)" class="card-img-top" alt="Imagem do Produto">
                        }
                        else
                        {
                            <img src="@produto.FotoUrl" class="card-img-top" alt="Imagem do Produto">
                        }
                    </a>
                    <div class="card-header card-preco">
                        <h5><b>@produto.Preco.ToString("C")</b></h5>
                    </div>
                    <h5 class="card-title"><b>@produto.Nome</b></h5>
                    <p class="card-text mb-2">@produto.Descricao</p>
            </div>
            <div class="card-footer bg-light mb-5 text-center border-0">
                    <small class="text-success">
                        <b>Quantidade em Estoque(@produto.QuantidadeEmEstoque)</b>
                    </small>
                </div>
            </a>
        <div class="mt-6 position-absolute bottom-0 end-0 mb-3 me-3">
                 <DeletarProduto produto="produto"> </DeletarProduto>
             </div>
    </div>
           
}

@code {

    [Parameter]
    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }




    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath!);
    }

    protected async Task MudarCorDoBotao_Click(Guid produtoId)
    {
        var produto = Produtos?.SingleOrDefault(p => p.Id == produtoId);
        if (produto != null)
        {
            produto.IsFavorito = !produto.IsFavorito;
            await Js.InvokeVoidAsync("mudarCorButao", produto.Id, produto.IsFavorito);
            await AtualizaProduto(produto!);
        }
    }



    public async Task AtualizaProduto(ProdutoDto Produto)
    {
        await ProdutoService!.AtualizaProdutoService(Produto);
    }

    public bool AbrirDialogModal { get; set; }


    private void DeletaItemEFechaDialog(bool acao)
    {
        AbrirDialogModal = false;
        NavigationManager!.NavigateTo("/CadastroProduto");
        StateHasChanged();
    }

    private void OpenDialog( )
    {
        AbrirDialogModal = true;
        StateHasChanged();
    }


}


