@page "/ProdutosDetalhes/{Id:guid}"


@inject IConfiguration config


@if (Produto is null && MensagemErro is null)
{
   <ExibirSpinner />
   <h3>Produto não encontrado</h3>
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <h3 class="mb-5">Detalhes do Produto</h3>
    <div class="row mb-2">
        <div class="col-12 col-md-3 Imagem-Produto mb-3 mb-md-0">
            @if (File.Exists(@Produto!.FotoUrl))
            {
                <img src="@Produto.FotoUrl" class="img-thumbnail img-fluid" alt="Imagem do Produto">
            }
            else
            {
                <img src="@CreateWebPath(Produto.FotoUrl)" class="img-thumbnail img-fluid" alt="Imagem do Produto">
            }
        </div>
        <div class="col-12 col-md-8">
            <div class="card h-100 w-100">
                <div class="card-body h-100 w-100">
                    <h5 class="card-title"><b>@Produto.Nome</b></h5>
                    <p class="card-text">@Produto.Descricao</p>
                    <div>
                        <i class="bi bi-heart-fill"></i>
                    </div>
                    <p><b>@Produto.Preco.ToString("c")&nbsp;(@Produto.QuantidadeEmEstoque items restantes)</b></p>
                    @if(@Produto.QuantidadeEmEstoque > 0)
                    {
                        <button class="btn btn-success shadow-none mt-3"
                                @onclick="() => AdicionarAoCarrinho_Click(new CarrinhoItemAdicionaDto
                                    {
                                     CarrinhoId = UsuarioLogado.CarrinhoId,
                                     ProdutoId = Produto.Id,
                                     Quantidade = 1
                                     })">
                            Incluir no Carrinho
                        </button>
                    }
                    else
                    {
                        <h1 class="text-danger">
                            Produto Esgotado!!!
                        </h1>
                        <div class="mt-2">  
                            <button class="btn btn-info shadow-none">
                                <a href="/ReabastecerProdutos" style="color: white; text-decoration: none">
                                    Reabastecer Produtos
                                </a>
                            </button>
                        </div>

                        <div class="mt-2">
                            <button class="btn btn-primary shadow-none">
                                <a href="/ProdutosPorCategoria/@Produto.CategoriaId" style="color: white; text-decoration: none">
                                        Voltar para Lista de Produtos
                                </a>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>


}


@code {

    [Inject]
    private IProdutoService? ProdutoService { get; set; }

    [Inject]
    private IProdutoHttpService? ProdutoHttpService { get; set; }

    [Inject]
    private ICarrinhoCompraService? CarrinhoCompraService { get; set; }
    [Inject]
    private ICarrinhoCompraHttpService? CarrinhoCompraHttpService { get; set; }

    [Inject]
    public ILocalStorageProdutosService? GerenciaProdutoLocalStorage { get; set; }
    [Inject]
    public ILocalStorageCarrinhoItensService? GerenciaCarrinhoLocalStorage { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    private List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    [Parameter]
    public Guid Id { get; set; }


    public ProdutoDto? Produto { get; set; } 


    public string? MensagemErro {get;set;}

    private string CreateWebPath(string? relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            CarrinhoCompraItens = await GerenciaCarrinhoLocalStorage!.GetCollection();
            //Produto = await ProdutoHttpService!.ObterUmProduto(Id);
            Produto = await GetProdutoPorIdStorage(Id);
        }

            catch (Exception ex)
            {
                MensagemErro = ex.Message;
            }
        }

        protected async Task AdicionarAoCarrinho_Click(CarrinhoItemAdicionaDto carrinhoItemAdicionaDto)
        {
            try
            {
                var carrinhoItemDto = await CarrinhoCompraHttpService!.AdicionaItemCarrinhoDto(carrinhoItemAdicionaDto);

                if (carrinhoItemDto != null)
                {
                    CarrinhoCompraItens!.Add(carrinhoItemDto);

                    await GerenciaCarrinhoLocalStorage!.SaveCollection(CarrinhoCompraItens);
                }


                NavigationManager!.NavigateTo("/CarrinhoCompra");
            }

            catch (Exception ex)
            {
                MensagemErro = ex.Message;
            }


        }

        private async Task<ProdutoDto> GetProdutoPorIdStorage(Guid id)
        {
            var produtosDto = await GerenciaProdutoLocalStorage!.GetCollection();

            if(produtosDto != null)
            {            
                return produtosDto.SingleOrDefault(p => p.Id == id) ?? null!;
            }
            return null!;
        }


        private async Task LimpaLocalStorage( )
        {
            await GerenciaProdutoLocalStorage!.RemoveCollection();
        }
}
