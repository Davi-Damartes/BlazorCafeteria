@page "/ProdutosPorCategoria/{CategoriaId:int}"

@attribute [Authorize]

@if (ProdutosPorCategoriaDto is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <h3 class="mb-2">(@NomeCategoria)</h3>
    if (ProdutosPorCategoriaDto!.Count() > 0)
    {
        <div class="row">
            <ExibirProdutos Produtos="@ProdutosPorCategoriaDto"></ExibirProdutos>
        </div>
    }
}


@code {

    [Parameter]
    public int CategoriaId { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public IProdutoHttpService? ProdutoHttpService { get; set; }

    [Inject]
    public ICarrinhoCompraHttpService? CarrinhoCompraService { get; set; }

    [Inject]
    public ILocalStorageProdutosService? GerenciaProdutoLocalStorage { get; set; }

    public IEnumerable<ProdutoDto>? ProdutosPorCategoriaDto { get; set; }

    public string? NomeCategoria { get; set; }
    public string? MensagemErro { get; set; }

    protected override async Task OnParametersSetAsync( )
    {
        try
        {
            ProdutosPorCategoriaDto = await ProdutoHttpService!.BuscarItensPorCategoria(CategoriaId);

            if (ProdutosPorCategoriaDto != null && ProdutosPorCategoriaDto.Count() > 0)
            {
                var produtoDto = ProdutosPorCategoriaDto
                            .FirstOrDefault(s => s.CategoriaId == CategoriaId);

                if (produtoDto != null)
                {
                    NomeCategoria = produtoDto.CategoriaNome;
                }
            }
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }
}
