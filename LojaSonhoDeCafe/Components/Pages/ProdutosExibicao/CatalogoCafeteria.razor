@page "/produtos"
@attribute [Authorize]

<PageTitle>Produtos</PageTitle>
@if(@Produtos == null)
{
     <ExibirSpinner /> 
}

@if (Produtos != null && Produtos.Any())
{       
        <CarouselSlides></CarouselSlides>

        <h3 class="mb-3 teste"> Produtos</h3>
        @if (Produtos.Count() > 0)
        {
        var produtosPorCategoria = from produto in Produtos
                                   group produto by produto.CategoriaId into prodPorCatGrupo
                                   orderby prodPorCatGrupo.Key
                                   select prodPorCatGrupo;

                  
                @foreach (var prodGrupo in produtosPorCategoria)
                {
                    <div class="row mt-3">
                        <h4 class="mb-5">@prodGrupo.FirstOrDefault(pg => pg.CategoriaId == prodGrupo.Key)!.CategoriaNome</h4>
                        <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
                    </div>
                }

        }
}
else
{
    <p>Buscando Produtos...</p>
}

@code {
    [Inject]
    private IProdutoService? ProdutoService { get; set; }
    [Inject]
    private IProdutoHttpService? ProdutoHttpService { get; set; }
    [Inject]
    public ICarrinhoCompraService?  CarrinhoCompraService { get; set; }
    [Inject]
    public ICarrinhoCompraHttpService? CarrinhoCompraHttpService { get; set; }

    [Inject]
    public ILocalStorageProdutosService? GerenciaProdutoLocalStorage { get; set; }
    [Inject]
    public ILocalStorageCarrinhoItensService? GerenciaCarrinhoLocalStorage { get; set; }

    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    private string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            Produtos = await GerenciaProdutoLocalStorage!.GetCollection();

            var carrinhoCompraItens = await CarrinhoCompraService!.ObterItens(UsuarioLogado.UsuarioId);
 
            var totalQuantidade = carrinhoCompraItens.Sum(i => i.Quantidade);

            CarrinhoCompraService!.RaiseEventCarrinhoCompraChanged(totalQuantidade);

        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

        private async Task LimpaLocalStorage( )
        {
            await GerenciaProdutoLocalStorage!.RemoveCollection();
            await GerenciaCarrinhoLocalStorage!.RemoveCollection();
        }

}