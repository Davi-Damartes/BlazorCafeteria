@page "/ReabastecerProdutos"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IConfiguration config
@inject IJSRuntime jsruntime

<PageTitle>Reabastecer Produto</PageTitle>
@if (@ProdutosEsgotados is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
        <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
   
}
else
{
    @if (ProdutosEsgotados.Count() > 0)
    {  
     <div class="container-flex produtos-container">
        <div class="row mt-3">
                @foreach (var produto in ProdutosEsgotados!)
                {
                    <div class="card text-center bg-light d-block" title="Detalhes do Produto">
                            <div class="card-body">
                                    @if (!File.Exists(produto.FotoUrl))
                                    {
                                        <img src="@CreateWebPath(produto.FotoUrl!)" class="card-img-top" alt="Imagem do Produto">
                                    }
                                    else
                                    {
                                        <img src="@produto.FotoUrl" class="card-img-top" alt="Imagem do Produto">
                                    }
                                <div class="card-header card-preco">
                                    <h5><b>@produto.Preco.ToString("C")</b></h5>
                                </div>
                                <h5 class="card-title"><b>@produto.Nome</b></h5>
                            </div>
                            <div class="card-footer bg-light mb-5 text-center border-0">
                                    <h2 class="text-danger">
                                        <b>Produto Esgotado!!!</b>
                                    </h2>

                            <div class="form-floating mt-5 fs-">
                                        <input type="number" class="form-control fs-4" @bind-value="produto.QuantidadeEmEstoque" placeholder="Quantidade" min="1" max="80"/>
                                        <label for="Quantidade" class="text-black-50">Quantidade de Produtos</label>
                                        <button class="btn btn-primary mt-3" @onclick="(()=> AbastecerProduto_click(produto))">
                                            Abastecer Produto
                                        </button>
                                </div>  
                            
                            </div>
                    </div>
                }
             </div>
         </div>
    }
    else
    {
        <h1>Não há produtos sem Estoque</h1>
    }


}



@code {

    [Inject]
    public IProdutoHttpService? ProdutoHttpService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    public Guid Id { get; set; }

    public IEnumerable<ProdutoDto>? Produtos { get; set; }

    public IEnumerable<ProdutoDto>? ProdutosEsgotados { get; set; }


    private int Quantidade { get; set; }

    private string? MensagemErro { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Produtos = await ProdutoHttpService!.ObterProdutos();
        ProdutosEsgotados = Produtos.Where(produto => produto.QuantidadeEmEstoque <= 0).ToList();
    }


    private async Task AbastecerProduto_click(ProdutoDto produto)
    {
        if (produto.QuantidadeEmEstoque > 80 || produto.QuantidadeEmEstoque <= 0)
        {
            MensagemErro = "Quantidade Inválida!!!";
            await ShowFailToastr();
            await Task.Delay(1000);
            NavigationManager!.NavigateTo("/Produtos");

        }
        else
        {
            await ProdutoHttpService!.AdicionarEstoqueAoProduto(produto.Id, produto.QuantidadeEmEstoque);
            await ShowSuccessToastr();
            await Task.Delay(1000);
            NavigationManager!.NavigateTo("/Produtos");           
        }
    }



    public async Task ShowSuccessToastr( )
    {
        await jsruntime.ToastrSuccess("Produto reabastecido com Sucesso!!!");
    }

    public async Task ShowFailToastr( )
    {
        await jsruntime.ToastrFail("Erro ao abastecer produto!");
    }


    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath!);
    }

}
