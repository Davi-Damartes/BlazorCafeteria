@page "/BuscarCep"

<PageTitle>Teste</PageTitle>
@if (@Produtos == null)
{
    <h1>Aguarde...</h1>
}

@if (Produtos != null && Produtos.Any())
{
    @foreach (var produto in Produtos!)
    {
        <div class="card text-center bg-light d-block" title="Detalhes do Produto">
            <div class="card-body">
                <div class="card-header card-preco">
                    <h5><b>@produto.Preco.ToString("C")</b></h5>
                </div>
                <h5 class="card-title"><b>@produto.Nome</b></h5>
                <p class="card-text mb-2 w-100 limitarLinhas-Card">@produto.Descricao</p>
            </div>
            <div class="card-footer bg-light mb-5 text-center border-0">
                <small class="text-success">
                    <b>Quantidade em Estoque(@produto.QuantidadeEmEstoque)</b>
                </small>
            </div>
        </div>
    }

    <h1>1 produtos</h1>
    <div class="card text-center bg-light d-block" title="Detalhes do Produto">
        <div class="card-body">
            <div class="card-header card-preco">
                <h5><b>@Produto.Preco.ToString("C")</b></h5>
            </div>
            <h5 class="card-title"><b>@Produto.Nome</b></h5>
            <p class="card-text mb-2 w-100 limitarLinhas-Card">@Produto.Descricao</p>
        </div>
        <div class="card-footer bg-light mb-5 text-center border-0">
            <small class="text-success">
                <b>Quantidade em Estoque(@Produto.QuantidadeEmEstoque)</b>
            </small>
        </div>
    </div>
}



@code {

    [Inject]
    private IProdutoHttpService? IProdutoHttpService { get; set; }

    public IEnumerable<ProdutoDto>? Produtos { get; set; }


    public ProdutoDto? Produto { get; set; }

    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync( )
    {
        try
        {
            Produtos = await IProdutoHttpService!.ObterProdutos();
            var teste = Produtos.First();
            Produto = await IProdutoHttpService.ObterUmProduto(teste.Id);
        }

        catch(Exception ex)
        {
            MensagemErro = $"erro> {ex}";
        }
    }

}



















@* <h1>Buscar Cep</h1>
<form>
    <div class="form-group">
        <label for="inputCep">CEP</label>
        <input type="text" class="form-control shadow-none" id="inputCep" @bind="cep" placeholder="Digite o CEP">
    </div>
    <button type="button" class="btn btn-primary mt-3" disabled="@EnableBtn" @onclick="BuscarDados">Consultar CEP</button>
</form>
    
<br />
<PreenchedoFormCep Cep="CepDigitado"></PreenchedoFormCep>


@code {

    public Cep? CepDigitado { get; set; }
    public string? cep { get; set; }


    public string? MensagemErro { get; set; }
    public HttpClient httpClient = new();

    public bool EnableBtn { get; set; }

    private async Task BuscarDados()
    {
        EnableBtn = true;
        var url = $"https://viacep.com.br/ws/{cep}/json/";
        CepDigitado = await httpClient.GetFromJsonAsync<Cep>(url);

        await Task.Delay(1500);
        EnableBtn = false;
    }
}
 *@

