@page "/CadastroProduto"

@inject IWebHostEnvironment Environment
@inject IConfiguration config

<h3>Cadastro de Produto</h3>

@if (erros.Count > 0)
{
    <h2>Erros</h2>
    <ul class="text-danger">
        @foreach (var error in erros)
        {
            <li>@error</li>
        }
    </ul>
}

<EditForm Model="ProdutoDto" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label for="Nome" class="form-label"><b>Nome do Produto:</b></label>
        <InputText id="Nome" class="form-control" @bind-Value="ProdutoDto!.Nome"></InputText>
    </div>
    <div class="mb-2">
        <label for="Descricao" class="form-label"><b>Descrição:</b></label>
        <InputText id="Descricao" class="form-control" @bind-Value="ProdutoDto.Descricao"></InputText>
    </div>
    <div class="mb-2">
        <label for="FotoProduto" class="form-label"><b>Foto do Produto:</b></label>
        <InputFile OnChange="LoadFiles" class="form-control" multiple accept=".png, .jpg, .jpeg" id="FotoUrl" @bind-Value="ProdutoDto.FotoUrl"></InputFile>
    </div>

    <div class="row mb-2">
        <div class="col">
            <label for="Preco" class="form-label"><b>Preço:</b></label>
            <InputNumber id="Preco" class="form-control" @bind-Value="ProdutoDto.Preco"></InputNumber>
        </div>
        <div class="col">
            <label for="QuantidadeEmEstoque" class="form-label"><b>Quantidade Em Estoque:</b></label>
            <InputNumber id="QuantidadeEmEstoque" class="form-control" @bind-Value="ProdutoDto.QuantidadeEmEstoque"></InputNumber>
        </div>
    </div>

    <div class="mb-2">
        <label for="CategoriaId" class="form-label"><b>Categoria:</b></label>
        <select id="CategoriaId" class="form-control" @bind="ProdutoDto.CategoriaId">
            <option value=" " selected><b>Escolha uma Categoria</b></option>
            @foreach (var categoria in Categorias!)
            {
                <option value="@categoria.Id">@categoria.Nome</option>
            }
        </select>
    </div>


    <button type="submit" class="btn btn-lg btn-primary mb-4 mt-1" 
            disabled="@EnableBtn" @onclick="DesableBtn">Criar
      </button>
</EditForm>



@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    
    [Inject]
    public IProdutoHttpService? ProdutoHttpService { get; set; }

    public IEnumerable<CategoriaDto>? Categorias { get; set; } = new List<CategoriaDto>();


    public ProdutoDto? ProdutoDto = new();

    private const long maxFileSize = 1024 * 1024 * 3;
    private const int maxAllowedFiles = 1;
    private IBrowserFile? file;     
    private List<string> erros = new();


    public bool EnableBtn { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Categorias = await ProdutoService!.BuscarCategorias();

    }

    private async Task DesableBtn()
    {
        EnableBtn = true;
        await Task.Delay(1500);
        EnableBtn = false;
    }


    private async Task SubmitForm()
    {
        try
        {
            if(ProdutoDto!.CategoriaId == 0)
            {
                erros.Add("O campo categoria não pode ser nullo!");
            }

            if(ProdutoDto.FotoUrl != null)
            {
                var resultado = await ProdutoHttpService!.AdicionarNovoProduto(ProdutoDto);
                StateHasChanged();
                NavigationManager!.NavigateTo($"/ProdutosPorCategoria/{ProdutoDto.CategoriaId}");
            }

            erros.Clear();
        }
        catch (Exception)
        {
            erros.Add($"Erro ao Criar o Produto");
        }
    }

    private async void LoadFiles(InputFileChangeEventArgs evento)
    {
        file = evento.File;

        string relativePath = await CaputurarImagem();
        ProdutoDto!.FotoUrl = relativePath;
    }

    private async Task<string> CaputurarImagem()
    {

    if(file is null)
    {
        return "";
    }

    try
    {
        // string imagemCript = Guid.NewGuid() + "_";
        string newFileName = Path.ChangeExtension(
                                Path.GetRandomFileName(),
                                Path.GetFileName(file.Name));

        string path = Path.Combine(
            config.GetValue<string>("ArmazenamentoProdutoImg")!,
            "ImagensCafeteria",
            newFileName);

        string relativePath = Path.Combine("ImagensCafeteria", newFileName);


        Directory.CreateDirectory(Path.Combine(
                    config.GetValue<string>("ArmazenamentoProdutoImg")!,
                    "ImagensCafeteria"));

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

        return relativePath;
    }

    catch (Exception ex)
    {
        erros.Add($"File: {file.Name} Erro:{ex.Message}");
        throw;
    }
}

}