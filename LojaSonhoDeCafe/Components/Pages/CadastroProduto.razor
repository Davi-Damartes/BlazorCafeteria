@page "/CadastroProduto"

@inject IWebHostEnvironment Environment
@inject IConfiguration config

<h3>Cadastro de Produto</h3>
<EditForm Model="ProdutoDto" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <label for="Nome">Nome do Produto: </label>
        <InputText id="Nome" class="form-control" @bind-Value="ProdutoDto.Nome"></InputText>
    </div>
    <div class="mb-4">
        <label for="Descricao">Descrição: </label>
        <InputText id="Descricao" class="form-control" @bind-Value="ProdutoDto.Descricao"></InputText>
    </div>
    <div class="mb-4">
        <label for="FotoProduto">Foto do Produto: </label>
        <InputFile OnChange="LoadFiles" class="form-control" id="FotoUrl" @bind-Value="ProdutoDto.FotoUrl"></InputFile>
    </div>

    <div class="mb-4">
        <label for="Preco">Preco: </label>
        <InputNumber id="Preco" class="form-control" @bind-Value="ProdutoDto.Preco"></InputNumber>
    </div>
    <div class="mb-4">
        <label for="QuantidadeEmEstoque">Quantidade Em Estoque: </label>
        <InputNumber id="QuantidadeEmEstoque" class="form-control" @bind-Value="ProdutoDto.QuantidadeEmEstoque"></InputNumber>
    </div>

    <div class="mb-4">
        <label for="CategoriaId">Categoria: </label>
        <select id="CategoriaId" class="form-control" @bind="ProdutoDto.CategoriaId">
            @foreach (var categoria in Categorias!)
            {
                <option value="@categoria.Id">@categoria.Nome</option>
            }
        </select>
    </div>
  

    <button type="submit" class="btn btn-primary btn-lg">Enviar</button>
</EditForm>

@if (erros.Count > 0)
{
    <h2>Erros</h2>
    <ul class="text-danger"> 
        @foreach(var error in erros)
        {
            <li>@error</li>
        }
    </ul>
}

@code {

        [Inject]
        public NavigationManager? navigationManager { get; set; }

        [Inject]
        public IProdutoService? ProdutoService { get; set; }

        public IEnumerable<CategoriaDto>? Categorias { get; set; } = new List<CategoriaDto>();

        private ProdutoDto? ProdutoDto = new();

        private IBrowserFile? file;
        private const long maxFileSize = 1024 * 1024 * 3;
        private const int maxAllowedFiles = 1;
        private List<string> erros = new();


        protected override async Task OnInitializedAsync()
        {
            Categorias = await ProdutoService!.BuscarCategorias();

        }

        private async Task SubmitForm()
        {
            try
            {
                string relativePath = await CaputurarImagem();
                ProdutoDto!.FotoUrl = relativePath;

                if(ProdutoDto.FotoUrl != null)
                {
                    await ProdutoService!.AdicionarProduto(ProdutoDto);
                    StateHasChanged();
                    navigationManager!.NavigateTo("/ ");
                }
            }
            catch (Exception ex)
            {
                erros.Add($"Erro: {ex.Message}");
            }
        }


        private string CreateWebPath(string relativePath)
        {
            return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
        }


        private void LoadFiles(InputFileChangeEventArgs evento)
        {
            file = evento.File;

        }
        private async Task<string> CaputurarImagem()
        {

        if(file is null)
        {
            return "";
        }

        try
        {
            string imagemCript = Guid.NewGuid() + "_";
            string newFileName = Path.ChangeExtension(
                                 imagemCript,
                                 Path.GetFileName(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("ArmazenamentoProdutoImg")!,
                "imagensCafeteria",
                newFileName);

            string relativePath = Path.Combine("imagensCafeteria",newFileName);


            Directory.CreateDirectory(
                        Path.Combine(
                        config.GetValue<string>("ArmazenamentoProdutoImg")!,
                        "imagensCafeteria"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }

        catch (Exception ex)
        {
            erros.Add($"File: {file.Name} Erro:{ex.Message}");
            throw;
        }
    }

}