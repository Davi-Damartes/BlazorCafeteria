@page "/CadastroProduto"

@inject IWebHostEnvironment Environment
@inject IConfiguration config

<h3>Cadastro de Produto</h3>

@if (erros.Count > 0)
{
    <h2>Erros</h2>
    <ul class="text-danger">
        @foreach (var error in erros)
        {
            <li>@error</li>
        }
    </ul>
}

<EditForm Model="ProdutoDto" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-4">
        <label for="Nome">Nome do Produto: </label>
        <InputText id="Nome" class="form-control" @bind-Value="ProdutoDto.Nome"></InputText>
    </div>
    <div class="mb-4">
        <label for="Descricao">Descrição: </label>
        <InputText id="Descricao" class="form-control" @bind-Value="ProdutoDto.Descricao"></InputText>
    </div>
    <div class="mb-4">
        <label for="FotoProduto">Foto do Produto: </label>
        <InputFile OnChange="LoadFiles"  class="form-control" multiple accept=".png, .jpg, .jpeg" id="FotoUrl" @bind-Value="ProdutoDto.FotoUrl"></InputFile>
    </div>

    <div class="mb-4">
        <label for="Preco">Preco: </label>
        <InputNumber id="Preco" class="form-control" @bind-Value="ProdutoDto.Preco"></InputNumber>
    </div>
    <div class="mb-4">
        <label for="QuantidadeEmEstoque">Quantidade Em Estoque: </label>
        <InputNumber id="QuantidadeEmEstoque" class="form-control" @bind-Value="ProdutoDto.QuantidadeEmEstoque"></InputNumber>
    </div>

    <div class="mb-4">
        <label for="CategoriaId">Categoria: </label>
            <select id="CategoriaId" class="form-control" @bind="ProdutoDto.CategoriaId">
            <option value=" " selected>Escolha uma Categoria</option>
                @foreach (var categoria in Categorias!)
                {
                    <option value="@categoria.Id">@categoria.Nome</option>
                }
            </select> 
    </div>

    <button type="submit" class="btn btn-primary btn-lg">Criar</button>
</EditForm>



@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    public IEnumerable<CategoriaDto>? Categorias { get; set; } = new List<CategoriaDto>();


    public ProdutoDto? ProdutoDto = new();

    private const long maxFileSize = 1024 * 1024 * 3;
    private const int maxAllowedFiles = 1;
    private IBrowserFile? file;     
    private List<string> erros = new();



    protected override async Task OnInitializedAsync()
    {
        Categorias = await ProdutoService!.BuscarCategorias();

    }

    private async Task SubmitForm()
    {
        try
        {
            string relativePath = await CaputurarImagem();
            ProdutoDto!.FotoUrl = relativePath;
            if(ProdutoDto.CategoriaId == 0)
            {
                erros.Add("A categoria não pode ser nulla!");
            }

            if(ProdutoDto.FotoUrl != null)
            {
                await ProdutoService!.AdicionarProduto(ProdutoDto);
                StateHasChanged();
                NavigationManager!.NavigateTo($"/ProdutosPorCategoria/{ProdutoDto.CategoriaId}");
            }

            erros.Clear();
        }
        catch (Exception)
        {
            erros.Add($"Erro ao Criar o Produto");
        }
    }

        private void LoadFiles(InputFileChangeEventArgs evento)
        {
            file = evento.File;

        }

        private async Task<string> CaputurarImagem()
        {

        if(file is null)
        {
            return "";
        }

        try
        {
           // string imagemCript = Guid.NewGuid() + "_";
            string newFileName = Path.ChangeExtension(
                                 Path.GetRandomFileName(),
                                 Path.GetFileName(file.Name));

            string path = Path.Combine(
                config.GetValue<string>("ArmazenamentoProdutoImg")!,
                "ImagensCafeteria",
                newFileName);

            string relativePath = Path.Combine("ImagensCafeteria", newFileName);


            Directory.CreateDirectory(Path.Combine(
                        config.GetValue<string>("ArmazenamentoProdutoImg")!,
                        "ImagensCafeteria"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }

        catch (Exception ex)
        {
            erros.Add($"File: {file.Name} Erro:{ex.Message}");
            throw;
        }
    }

}