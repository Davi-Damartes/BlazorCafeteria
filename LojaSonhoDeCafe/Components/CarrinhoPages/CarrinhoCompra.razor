@page "/CarrinhoCompra"

@attribute [Authorize]

@inject IConfiguration config


<PageTitle>Carrinho de Compra</PageTitle>
@if (CarrinhoCompraItens is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <h3 class="mb-5">Carrinho</h3>
    @if (CarrinhoCompraItens?.Count > 0)
    {

        <div class="row g-3">
            <div class="col-md-9">
                @foreach (var item in CarrinhoCompraItens!)
                {
                    <div class="row mb-5">
                        <div class="col-4 col-md-3 col-lg-2 h-25 w-25">

                            @if (File.Exists(@item.ProdutoFotoUrl))
                            {
                                <img src="@item.ProdutoFotoUrl" class="img-thumbnail card-img-top" alt="Imagem do Produto">
                            }
                            else
                            {
                                <img src="@CreateWebPath(item.ProdutoFotoUrl)" class="img-thumbnail card-img-top" alt="Imagem do Produto">
                            }
                        </div>
                        <div class="col-8 col-md-9 col-lg-7 col-xl-8 text-left align-self-center">

                            <h5>@item.ProdutoNome</h5>
                            <h6>@item.ProdutoDescricao </h6>


                            <div class="text-start mt-3">
                                <span>Preço: <b>@item.Preco.ToString("C")</b></span>
                                <input type="number" class="text-lg-center" @bind="@item.Quantidade" min="1" max="@item.QuantidadeEmEstoque" />
                                <button class="btn btn-info btn-sm shadow-none EscondeButtonAtualizaQnt" @onclick="(()=>
                                    AtualizarQuantidadeCarrinho_Click(item.Id, item.Quantidade, item.QuantidadeEmEstoque))" title="Adicionar Quantidade">
                                    <svg style="height: 25px; width: 25px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                     <path d="M256 48a208 208 0 1 1 0 416 208 208 0 1 1 
                                        0-416zm0 464A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 
                                        0l-111 111-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L369 209z" />
                                    </svg>
                                </button>
                                <button @onclick="(()=> DeletaCarrinhoItem_Click(item.Id))" class="btn btn-danger shadow-none text-end" title="Remover item do Carrinho">
                                    <svg style="text-align: center; height: 23px; width: 23px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                        <path fill="#ffffff" d="M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 
                                            0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0
                                            64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96
                                            64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 
                                            7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0
                                            8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }
         </div>

            <div class="col-md-3">
                <h2>Carrinho - Resumo</h2>
                <div class="mt-2">
                    <div class="fs-4"><b>Total - (@QuantidadeTotal items)&nbsp;</b><b>R$ @PrecoTotal</b>
                        <a href="/PagamentoPersonalizado" class="btn btn-success text-center">
                        <i class="fa-solid fa-credit-card shadow-none align-self-md-center"></i>&nbsp;Pagamento                  
                    </a> 
                    </div>
                </div>
            </div>
        </div>
       
    }
    else
    {
        <div>
            <img src="/Imagens/CarrinhoEmpty.png">
            <h3><b>Carrinho De Compra vazio...</b>.</h3>
        </div>
    }


}

@code {
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    [Inject]
    public ICarrinhoCompraHttpService? CarrinhoCompraHttpService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public ILocalStorageCarrinhoItensService? GerenciaCarrinhoLocalStorage { get; set; }

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    public string? MensagemErro { get; set; }

    public decimal PrecoTotal { get; set; }

    public int QuantidadeTotal { get; set; }


    private string CreateWebPath(string? relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath!);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            //CarrinhoCompraItens = await GerenciaCarrinhoLocalStorage!.GetCollection();
            CarrinhoCompraItens = await CarrinhoCompraHttpService.ObterItensCarrinho(UsuarioLogado.UsuarioId);

            //CalculaResumoCarrinhoTotal();
            CarrinhoChanged();

        }

        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }


    private CarrinhoItemDto ObtemItemDoCarrinho(int id)
    {
        return CarrinhoCompraItens!.FirstOrDefault(i => i.Id == id) ?? null!;
    }


    protected async Task AtualizarQuantidadeCarrinho_Click(int id, int quantidade, int quantidadeEmEstoque)
    {
        try
        {
            if(quantidade > 0 && quantidade <= quantidadeEmEstoque)
            {
                var atualizaCarrinhoDto = new CarrinhoItemAtualizaQuantidadeDto
                    {
                        CarrinhoId = id,
                        Quantidade = quantidade
                    };

               // var retornaItemAtualizadoDto = await CarrinhoCompraService!
                        //.AtualizarQuantidade(atualizaCarrinhoDto.CarrinhoId, atualizaCarrinhoDto);
                var retornaItemAtualizadoDto = await CarrinhoCompraHttpService!
                                              .AtualizarQuantidade(atualizaCarrinhoDto.CarrinhoId, atualizaCarrinhoDto);

                await AtualizarPrecoTotalItem(retornaItemAtualizadoDto);
                //CalculaResumoCarrinhoTotal();
                CarrinhoChanged();
            }           
            else
            {
                var item = CarrinhoCompraItens!.FirstOrDefault(x => x.Id == id);
                if(item is not null)
                {
                    item.Quantidade = 1;
                    item.PrecoTotal = item.Preco;
                }
            }

        }

        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }

    }


    protected async Task DeletaCarrinhoItem_Click(int id)
    {
        var carrinhoItemDto = await CarrinhoCompraHttpService!.DeletaItemDoCarrinho(id);

        //Remove item da coleção de memória do client
        await RemoveCarrinhoItem(id);

        //CalculaResumoCarrinhoTotal();
        CarrinhoChanged();
    }


    private async Task RemoveCarrinhoItem(int id)
    {
        var carrinhoDto = ObtemItemDoCarrinho(id);
        CarrinhoCompraItens!.Remove(carrinhoDto);

        await GerenciaCarrinhoLocalStorage!.SaveCollection(CarrinhoCompraItens);
    }


    private void SetPrecoTotal()
    {
        PrecoTotal = CarrinhoCompraItens!.Sum(p => p.PrecoTotal);
    }

    private void SetQuantidadeTotal()
    {
        QuantidadeTotal = CarrinhoCompraItens!.Sum(P => P.Quantidade);
    }

    private void CalculaResumoCarrinhoTotal()
    {
        SetPrecoTotal();
        SetQuantidadeTotal(); 
    }

    private async Task AtualizarPrecoTotalItem(CarrinhoItemDto carrinhoItemDto)
    {
        var item = ObtemItemDoCarrinho(carrinhoItemDto.Id);

        if(item is not null)
        {
            item.PrecoTotal = carrinhoItemDto.Preco * carrinhoItemDto.Quantidade;
        }

        await GerenciaCarrinhoLocalStorage!.SaveCollection(CarrinhoCompraItens!);

    }


    private void CarrinhoChanged()
    {
        CalculaResumoCarrinhoTotal();
        CarrinhoCompraService!.RaiseEventCarrinhoCompraChanged(QuantidadeTotal);
    }

}
