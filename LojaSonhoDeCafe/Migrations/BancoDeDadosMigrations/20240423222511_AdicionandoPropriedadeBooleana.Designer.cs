// <auto-generated />
using System;
using LojaSonhoDeCafe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LojaSonhoDeCafe.Migrations.BancoDeDadosMigrations
{
    [DbContext(typeof(BancoDeDados))]
    [Migration("20240423222511_AdicionandoPropriedadeBooleana")]
    partial class AdicionandoPropriedadeBooleana
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carrinhos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UsuarioId = "1"
                        },
                        new
                        {
                            Id = 2,
                            UsuarioId = "2"
                        });
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.CarrinhoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrinhoId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CarrinhoItens");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconeCss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconeCss = "fa-coffee",
                            Nome = "Cafés"
                        },
                        new
                        {
                            Id = 2,
                            IconeCss = "fa-cookie",
                            Nome = "Salgados"
                        },
                        new
                        {
                            Id = 3,
                            IconeCss = "fa-birthday-cake",
                            Nome = "Doces"
                        },
                        new
                        {
                            Id = 4,
                            IconeCss = "fa-hamburger",
                            Nome = "Lanches"
                        });
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FotoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("ProdutoFavorito")
                        .HasColumnType("bit");

                    b.Property<int>("QuantidadeEmEstoque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84a1c72e-38c7-429a-b93c-947c54b0a8ef"),
                            CategoriaId = 1,
                            Descricao = "Café forte e encorpado, ideal para quem gosta de um sabor intenso.",
                            FotoUrl = "/Imagens/Cafes/espresso.jpg",
                            Nome = "Café Espresso",
                            Preco = 3.50m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 100
                        },
                        new
                        {
                            Id = new Guid("874ff6fb-7218-4387-b4a1-93507383ea70"),
                            CategoriaId = 1,
                            Descricao = "Café suave e cremoso, feito com leite vaporizado.",
                            FotoUrl = "/Imagens/Cafes/latte.jpg",
                            Nome = "Café Latte",
                            Preco = 4.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 80
                        },
                        new
                        {
                            Id = new Guid("ea3e8728-4766-44ce-8856-7aec39a21619"),
                            CategoriaId = 1,
                            Descricao = "Café cremoso com uma generosa camada de espuma de leite e canela por cima.",
                            FotoUrl = "/Imagens/Cafes/capuccino.jpg",
                            Nome = "Café Capuccino",
                            Preco = 4.50m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 70
                        },
                        new
                        {
                            Id = new Guid("4b9de137-c721-4673-b814-fd1c1e5745db"),
                            CategoriaId = 2,
                            Descricao = "Croissant recheado com queijo derretido.",
                            FotoUrl = "/Imagens/Salgados/croissant_queijo.jpg",
                            Nome = "Croissant de Queijo",
                            Preco = 5.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 60
                        },
                        new
                        {
                            Id = new Guid("abad6502-8e02-4a3d-9269-317d4eafad83"),
                            CategoriaId = 2,
                            Descricao = "Pão de queijo quentinho e delicioso.",
                            FotoUrl = "/Imagens/Salgados/pao_queijo.jpg",
                            Nome = "Pão de Queijo",
                            Preco = 3.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 70
                        },
                        new
                        {
                            Id = new Guid("dc2f536f-c0e0-450f-812b-e4a3cb153ff9"),
                            CategoriaId = 2,
                            Descricao = "Coxinha deliciosa e crocante.",
                            FotoUrl = "/Imagens/Salgados/coxinha_de_frango.jpg",
                            Nome = "Coxinha de Frango",
                            Preco = 3.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 70
                        },
                        new
                        {
                            Id = new Guid("0a6268f5-2f0b-4bbd-9f85-1f96697589a7"),
                            CategoriaId = 3,
                            Descricao = "Bolo de cenoura macio coberto com ganache de chocolate.",
                            FotoUrl = "/Imagens/Doces/bolo_cenoura.jpg",
                            Nome = "Bolo de Cenoura com Chocolate",
                            Preco = 6.50m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 30
                        },
                        new
                        {
                            Id = new Guid("be516142-59ab-4b24-b69f-0066ddb6c250"),
                            CategoriaId = 3,
                            Descricao = "Torta cremosa de limão com uma base crocante.",
                            FotoUrl = "/Imagens/Doces/torta_limao.jpg",
                            Nome = "Torta de Limão",
                            Preco = 7.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 40
                        },
                        new
                        {
                            Id = new Guid("2dad6254-733c-400e-8941-64f083f93e11"),
                            CategoriaId = 4,
                            Descricao = "Sanduíche fresco com frango grelhado e cream cheese.",
                            FotoUrl = "/Imagens/Lanches/sanduiche_frango.jpg",
                            Nome = "Sanduíche de Frango com Cream Cheese",
                            Preco = 8.00m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 50
                        },
                        new
                        {
                            Id = new Guid("7d17dec7-db7d-4117-b58d-677a49021127"),
                            CategoriaId = 4,
                            Descricao = "Baguete recheada com presunto, queijo e vegetais frescos.",
                            FotoUrl = "/Imagens/Lanches/baguete.jpg",
                            Nome = "Baguete de Presunto e Queijo",
                            Preco = 7.50m,
                            ProdutoFavorito = false,
                            QuantidadeEmEstoque = 40
                        });
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CarrinhoId")
                        .HasColumnType("int");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c823f4b-0c6e-4908-b24e-56264a753f50"),
                            NomeUsuario = "Macoratti"
                        },
                        new
                        {
                            Id = new Guid("88d41c7b-0e67-4bd2-b6e7-b1bb2a47abe0"),
                            NomeUsuario = "Janice"
                        });
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.CarrinhoItem", b =>
                {
                    b.HasOne("LojaSonhoDeCafe.Entities.Carrinho", "Carrinho")
                        .WithMany("Itens")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LojaSonhoDeCafe.Entities.Produto", "Produto")
                        .WithMany("Itens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Produto", b =>
                {
                    b.HasOne("LojaSonhoDeCafe.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Usuario", b =>
                {
                    b.HasOne("LojaSonhoDeCafe.Entities.Carrinho", "Carrinho")
                        .WithMany()
                        .HasForeignKey("CarrinhoId");

                    b.Navigation("Carrinho");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Carrinho", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("LojaSonhoDeCafe.Entities.Produto", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
